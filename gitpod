#!/bin/bash

# See README for documentation

if [ "$1" = "add" ]
then
    # we're being run manually from the command line
    cd
    git clone --mirror https://github.com/$2 $2.git
    exit $?
fi

# ----------------------------------------------------------------------
# check that we're being called by git-daemon; exit if not.  We have not yet
# added support for 'git archive', by the way
[ "$1" = "upload-pack" ] || { echo huh?; exit 1; }

# get the repo name
repo=$2	# this is also $PWD, by the way
# it is a full path; let's trim it a bit for our purposes
repo=${repo#$HOME/}
repo=${repo%.git}

# no action needed for status repo
[ "$repo" = "status/" ] && exit 0
# about that trailing slash: status is a non-bare repo, so $repo starts out as
# "$HOME/status/.git", and the two transformations above turn it into "status/"

# code to add a tag to an optional "status" repo
set_status() (
    [ -d $HOME/status ] || return

    echo "$*" >> ~/gh.status.log
    cd $HOME/status
    unset GIT_DIR
    git tag "$1"

    # housekeeping; delete all but the last 100 "status" lines (i.e., tags).
    # I've no idea what happens when there are way too many tags, and I don't
    # care, in this application.  This "100" is another hardcoding, by the way
    git tag | head -n -100 | while read t
    do
        git tag -d "$t"
        echo $t >> $HOME/deleted.tags
    done
)

# too noisy; commented out
# set_status "`date +%F.%H-%M-%S`-$REMOTE_ADDR-$repo"

# is it fresh?  We currently hardcode freshness as just under 2.5 hours
# (specifically, 10% of a day)
if perl -e 'exit 0 if -M "FETCH_HEAD" > 0.1; exit 1'
then
    set_status "`date +%F.%H-%M-%S`-fetching-$repo"
    git fetch
    set_status "`date +%F.%H-%M-%S`-fetching-$repo-DONE"
fi

exit 0
